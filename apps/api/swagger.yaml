openapi: 3.0.0
info:
  title: STEPS API
  description: API endpoints for STEPS bot

servers:
  - url: http://localhost:3001/api
  - url: https://steps-admin.herokuapp.com/api

components:
  schemas:
    Org:
      properties:
        name:
          type: string
        sms_number:
          type: string
          format: phone
        logo:
          type: string
          format: uri
          nullable: true
    Message:
      properties:
        text:
          type: string
        to_user:
          type: integer
        from_user:
          type: integer
        media_id:
          type: integer
          nullable: true
        request_id:
          type: integer
        timestamp:
          type: string
          format: date-time
        responses:
          type: object
          nullable: true
        topic:
          type: string
          nullable: true
    Media:
      properties:
        task_id:
          type: integer
          nullable: true
        title:
          type: string
        category:
          type: string
        description:
          type: string
          nullable: true
        url:
          type: string
          format: uri
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        published_by:
          type: integer
          nullable: true
          format: org-id
        type:
          nullable: true
          type: string
          enum: [TASK_CONTENT, TASK_RESOURCE, STORY, GENERAL_EDUCATION]
    Request:
      properties:
        status:
          nullable: true
          type: string
          enum: [NEEDS_ASSISTANCE, REPLIED, RESOLVED]
        user_id:
          type: integer
        task_id:
          type: integer
        created_at:
          type: date-time
          nullable: true
    Step:
      properties:
        text:
          type: string
        note:
          type: string
          nullable: true
    ViewedMedia:
      properties:
        id:
          type: integer
        media_id:
          type: integer
        client_id:
          type: integer
    Task:
      properties:
        title:
          type: string
        category:
          type: string
        description:
          type: string
          nullable: true
        status:
          type: string
          enum: [ACTIVE, COMPLETED, ARCHIVED]
          nullable: true
        created_by:
          type: integer
          nullable: true
          format: org-id
        user_id:
          type: integer
          nullable: true
        difficulty:
          type: string
          enum: [EASY, MODERATE, DIFFICULT]
          nullable: true
        date_created:
          type: string
          format: date-time
        date_completed:
          type: string
          format: date-time
          nullable: true
        recurring:
          nullable: true
          type: object
        steps:
          nullable: true
          type: array
          items:
            $ref: '#components/schemas/Step'
        order:
          nullable: true
          type: integer
        date_assigned:
          nullable: true
          type: date-time
    User:
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          format: phone
          nullable: true
        coach_id:
          type: integer
          nullable: true
        org_id:
          type: integer
        color:
          type: string
        goals:
          type: array
          items:
            type: string
          nullable: true
        status:
          type: string
          enum: [AWAITING_HELP, WORKING, NON_RESPONSIVE]
        updated:
          type: string
          format: date-time
          nullable: true
        platform:
          type: string
          enum: [SMS, FBOOK]
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        follow_up_date:
          type: string
          format: date-time
          nullable: true
        plan_url:
          type: string
          nullable: true
        checkin_times:
          type: array
          nullable: true
          items:
            type: object
            properties:
              topic:
                type: string
              message:
                type: string
              time:
                type: string
                format: date-time
        topic:
          type: string
          nullable: true
        fb_id:
          type: string
          nullable: true
        temp_help_response:
          type: string
          nullable: true


paths:
  /clients:
    get:
      summary: Return a list of Clients
      tags: [users]
      responses:
        '200':
          description: A JSON array of User objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/User'
    post:
      summary: Create a new client
      tags: [users]
      requestBody:
        description: New Client to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /clients/{id}:
    get:
      summary: Return a single Client by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id
      tags: [users]
      responses:
        '200':
          description: A JSON object representing a single Client (user)
          content:
            application/json:
              schema:
                $ref: '#components/schemas/User'
    put:
      summary: Update a single Client by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Client ID
      requestBody:
        description: Existing Client to Update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      tags: [users]
      responses:
        '200':
          description: A JSON object representing a single Client (user)
          content:
            application/json:
              schema:
                $ref: '#components/schemas/User'
    delete:
      summary: Delete a Client by the given id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id to be deleted
      tags: [users]
      responses:
        '200':
          description: The number of Clients deleted (should be 1 or 0)
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: number
  /clients/{id}/tasks:
    get:
      summary: Get a client's list of assigned tasks.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id
      tags: [users]
      responses:
        '200':
          description: Client's Tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /clients/{id}/messages:
    get:
      summary: Get messages to or from a client.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id
      tags: [users]
      responses:
        '200':
          description: Client's Tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
  /clients/{id}/requests:
    get:
      summary: Get all of a client's requests.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id
      tags: [users]
      responses:
        '200':
          description: Client's Tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
  /clients/{id}/viewed_media:
    get:
      summary: Get all of a client's viewed media
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Client ID
      tags: [users]
      responses:
        '200':
          description: Client's Tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Media'
  /clients/{id}/viewed_media/{media_id}:
    post:
      tags: [users]
      summary: Mark a particular media item as having been viewed by the client.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Client ID
      responses:
        '201':
          description: Client's Tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ViewedMedia'
    delete:
      summary: Mark a particular media item as NOT having been viewed by the client.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Client ID
        - in: path
          name: media_id
          schema:
            type: integer
          required: true
          description: Media ID
      tags: [users]
      responses:
        '200':
          description: Number deleted (should be 1 or 0)
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: integer

  /coaches:
    get:
      summary: Return a list of Coaches
      tags: [users]
      responses:
        '200':
          description: A JSON array of Coach objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/User'
    post:
      summary: Create a new Coach
      tags: [users]
      requestBody:
        description: New Coach to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              $ref: '#/components/schemas/User'
  /coaches/{id}:
    get:
      summary: Return a single Coach by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id
      tags: [users]
      responses:
        '200':
          description: A JSON object representing a single Coach (user)
          content:
            application/json:
              schema:
                $ref: '#components/schemas/User'
    delete:
      summary: Delete a Coach by the given id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id to be deleted
      tags: [users]
      responses:
        '200':
          description: The number of Coach deleted (should be 1 or 0)
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: number

  /orgs:
    get:
      summary: Return a list of Orgs
      tags: [orgs]
      responses:
        '200':
          description: A JSON array of Org objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Org'
    post:
      summary: Create a new Org
      tags: [orgs]
      requestBody:
        description: New Org to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Org'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Org'
  /orgs/{id}:
    get:
      summary: Return a single Org by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id
      tags: [orgs]
      responses:
        '200':
          description: A JSON object representing a single Org
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Org'
    delete:
      summary: Delete an Org by the given id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id to be deleted
      tags: [orgs]
      responses:
        '200':
          description: The number of Orgs deleted (should be 1 or 0)
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: number

  /tasks:
    get:
      summary: Return a list of Tasks
      tags: [tasks]
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: ['ACTIVE', 'COMPLETED', 'ARCHIVED']
          required: false
          description: Filter by the status of the task
      responses:
        '200':
          description: A JSON array of Task objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Task'
    post:
      summary: Create a new Task
      tags: [tasks]
      requestBody:
        description: New Task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '500':
          description: Server error (more detailed errors in development/test)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /tasks/{id}:
    get:
      summary: Return a single Task by ID
      description: >
        Please note! I'm playing a little fast and loose with the
        schema for Task. As an optimization, when you GET a single
        task by ID, you'll also receive the associated steps. This is
        for the (common I hope) use case where you'd like to display a
        Task along with it's associated steps. When getting a list of
        Tasks, you'll not receive the associated Steps.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id
      tags: [tasks]
      responses:
        '200':
          description: A JSON object representing a single Task
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Task'
    put:
      summary: Update a single task identified by the given id.
      description: >
        The updated task must have all fields provided. You could use the
        result of a GET /tasks/{id} call to populate the body of this request.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The numeric id if the task to update.
      tags: [tasks]
      requestBody:
        description: Task to be update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: A JSON object of the task that was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    delete:
      summary: Delete an Task by the given id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id to be deleted
      tags: [tasks]
      responses:
        '200':
          description: The number of Tasks deleted (should be 1 or 0)
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: number

  /messages:
    get:
      summary: Return a list of Messages
      tags: [messages]
      responses:
        '200':
          description: A JSON array of Message objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Message'
    post:
      summary: Create a new Message
      tags: [messages]
      requestBody:
        description: New Message to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '500':
          description: Server error (more detailed errors in development/test)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /messages/{id}:
    get:
      summary: Return a single Message by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id
      tags: [messages]
      responses:
        '200':
          description: A JSON object representing a single Message
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Message'
    delete:
      summary: Delete an Message by the given id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id to be deleted
      tags: [messages]
      responses:
        '200':
          description: The number of Messages deleted (should be 1 or 0)
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: number

  /media:
    get:
      summary: Return a list of Media
      tags: [media]
      responses:
        '200':
          description: A JSON array of Media objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Media'
    post:
      summary: Create a new media
      tags: [media]
      requestBody:
        description: New Media to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Media'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
  /media/{id}:
    get:
      summary: Return a single Media by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id
      tags: [media]
      responses:
        '200':
          description: A JSON object representing a single Media
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Media'
    delete:
      summary: Delete Media by the given id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id to be deleted
      tags: [media]
      responses:
        '200':
          description: The number of Media objects deleted (should be 1 or 0)
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: number

  /requests:
    get:
      summary: Return a list of Requests
      tags: [requests]
      responses:
        '200':
          description: A JSON array of Request objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Request'
    post:
      summary: Create a new Request
      tags: [requests]
      requestBody:
        description: New Request to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '500':
          description: Server error (more detailed errors in development/test)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
  /requests/{id}:
    get:
      summary: Return a single Request by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id
      tags: [requests]
      responses:
        '200':
          description: A JSON object representing a single Request
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Request'
    put:
      summary: Update a single Request by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id
      tags: [requests]
      requestBody:
        description: New Request to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '200':
          description: A JSON object representing a single Request
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Request'
    delete:
      summary: Delete an Request by the given id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id to be deleted
      tags: [requests]
      responses:
        '200':
          description: The number of Requests deleted (should be 1 or 0)
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: number
